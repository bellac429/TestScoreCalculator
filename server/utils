export function calculateMedian(scores) {
    // First, sort the array in ascending order
    scores.sort((a, b) => a - b);

    // Find the middle index
    const middleIndex = Math.floor(scores.length / 2);

    // Check if the array length is even or odd
    if (scores.length % 2 === 0) {
        // If even, return the average of the two middle numbers
        return (scores[middleIndex - 1] + scores[middleIndex]) / 2;
    } else {
        // If odd, return the middle number
        return scores[middleIndex];
    }
}

// Function to retrieve percentile based on grade, score, and season
function getPercentile(score, grade, season, lookupTable) {
    if (lookupTable.hasOwnProperty(grade) && lookupTable[grade].hasOwnProperty(score)) {
        return lookupTable[grade][score][season.toLowerCase()];
    } else {
        return null; // Handle missing scores or grades
    }
}

// Function to process the sheet data and add percentiles
function addPercentiles(sheetData, lookupTable, season) {
    return sheetData.map(entry => ({
        ...entry,
        "Basic Reading Percentile": getPercentile(entry["Basic Reading"], entry["Grade"], season, lookupTable),
        "Proficient Reading Percentile": getPercentile(entry["Proficient Reading"], entry["Grade"], season, lookupTable)
    }));
}